/*******************************************************************************
 * Copyright (c) 2017, 2019 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

// Set TEST_JDK_HOME here not in the variables-functions.set_job_variables() function
// to ensure a correct TEST_JDK_HOME path. TEST_JDK_HOME should be available on the
// machine the tests run.
// set_job_variables() is usually called on the master not on the node (where
// the tests run) and the master's WORKSPACE is different than the node's WORKSPACE

BUILD_RELEASE_IMAGES = ''

BUILD_RELEASE_IMAGES = "build/${RELEASE}/images/"

TEST_JDK_HOME = "${WORKSPACE}/${BUILD_RELEASE_IMAGES}${JDK_FOLDER}"
NATIVE_TEST_LIBS = "${WORKSPACE}/${BUILD_RELEASE_IMAGES}test/openj9/"

def fetch_artifacts(){
    stage('Fetch Artifacts') {
        timestamps {
            step([$class: 'CopyArtifact',
                fingerprintArtifacts: true,
                projectName: "${params.UPSTREAM_JOB_NAME}",
                selector: [$class: 'SpecificBuildSelector',
                            buildNumber: "${params.UPSTREAM_JOB_NUMBER}"]])
            sh 'for filename in *.tar.gz; do tar zxf $filename; done'
        }
    }
}

def configure() {
    stage('Configure Test') {
        timestamps {
            dir ('openj9/test/TKG') {
				withEnv(["SPEC=${SPEC}", "AUTO_DETECT=false", "TEST_JDK_HOME=${TEST_JDK_HOME}", "JDK_VERSION=Valhalla", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
                    sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/Valhalla -f run_configure.mk'
                }
            }
        }
    }
}

def configureCMDLineTest() {
    stage('Configure CMDLine Test') {
        timestamps {
            dir ('openj9/test/TKG') {
				withEnv(["SPEC=${SPEC}", "AUTO_DETECT=false", "TEST_JDK_HOME=${TEST_JDK_HOME}", "JDK_VERSION=Valhalla", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
					sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/cmdline_options_tester -f run_configure.mk'
                    sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/cmdLineTests/valuetypeddrtests -f run_configure.mk'
                }
            }
        }
    }
}

def get_dependencies() {
    stage('Get Test Dependencies') {
        timestamps {
            copyArtifacts fingerprintArtifacts: true, projectName: "${TEST_DEPENDENCIES_JOB_NAME}", selector: lastSuccessful(), target: 'openj9/test/TestConfig/lib'
        }
    }
}

def setupTests() {
	stage('Setup Tests') {
        timestamps {
            dir ('openj9/test') {
                withEnv(["TEST_JDK_HOME=${TEST_JDK_HOME}", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
                    sh 'git clone https://github.com/tajila/TKG.git'
                }
            }
        }
    }

}

def compile() {
    stage('Compile Test') {
        timestamps {
            dir ('openj9/test/TKG') {
                withEnv(["TEST_JDK_HOME=${TEST_JDK_HOME}", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
                    sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/Valhalla compile'
                }
            }
        }
        timestamps {
            dir ('openj9/test/TKG') {
                withEnv(["TEST_JDK_HOME=${TEST_JDK_HOME}", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
                	sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/cmdline_options_tester compile'
                    sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/cmdLineTests/valuetypeddrtests compile'
                }
            }
        }
    }
}

def compileCMDLineTest() {
    stage('Compile CMDLineTest Test') {
        timestamps {
            dir ('openj9/test/TKG') {
                withEnv(["TEST_JDK_HOME=${TEST_JDK_HOME}", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
                	sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/cmdline_options_tester compile'
                    sh 'make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/cmdLineTests/valuetypeddrtests compile'
                }
            }
        }
    }
}

def test() {
    stage('Valhalla Test') {
        timestamps {
            dir ('openj9/test/TKG') {
                withEnv(["TEST_JDK_HOME=${TEST_JDK_HOME}", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
                    sh "make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/Valhalla ${TEST_TARGET}"
                }
            }
        }
    }
}

def testCMDLineTest() {
    stage('CommandLine Tests') {
        timestamps {
            dir ('openj9/test/TKG') {
                withEnv(["TEST_JDK_HOME=${TEST_JDK_HOME}", "NATIVE_TEST_LIBS=${NATIVE_TEST_LIBS}"]) {
                    sh "make SPEC=x86-64_linux JDK_IMPL=openj9 AUTO_DETECT=false JDK_VERSION=Valhalla BUILD_LIST=functional/cmdLineTests/valuetypeddrtests _extended"
                }
            }
        }
    }
}

def publish() {
    stage('Publish Test Results') {
        timestamps {
            junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/junitreports/**/*.xml'
            step([$class: 'Publisher', reportFilenamePattern: '**/testng-results.xml'])
            step([$class: "TapPublisher", testResults: "**/*.tap"])
            if (currentBuild.result == 'UNSTABLE') {
                sh "tar -zcf test_output${TEST_TARGET}.tar.gz openj9/test/TestConfig/test_output_*"
			    archiveArtifacts artifacts: "**/test_output${TEST_TARGET}.tar.gz", fingerprint: true, allowEmptyArchive: true
            }
        }
    }
}

def add_node_to_description() {
    def TMP_DESC = (currentBuild.description) ? currentBuild.description + "<br>" : ""
    currentBuild.description = TMP_DESC + "<a href=${JENKINS_URL}computer/${NODE_NAME}>${NODE_NAME}</a>"
}

def test_all() {
    timeout(time: 8, unit: 'HOURS') {
        try {
            add_node_to_description()
            setupTests()
            configure()
            //get_dependencies()
            compile()
            test()
			configureCMDLineTest()
            compileCMDLineTest()
            testCMDLineTest()
            publish()
        } finally {
            // disableDeferredWipeout also requires deleteDirs. See https://issues.jenkins-ci.org/browse/JENKINS-54225
            cleanWs notFailBuild: true, disableDeferredWipeout: true, deleteDirs: true
        }
    }
}

def test_all_with_fetch() {
    fetch_artifacts()
    test_all()
}
return this
