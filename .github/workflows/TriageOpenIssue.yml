name: Testing Triager on Opened issues
run-name: Triager Tester in GitHub Actions

on:
    issues:
        types: [opened]

jobs:
  issue_opened:
      name: Issue Opened
      runs-on: ubuntu-latest
      steps:
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '14'

        - name: Install dependencies
          run: npm install axios

        - name: commenting on issues
          uses: actions/github-script@v4
          with: 
              script: |
                  const axios = require('axios');
                  
                  const input = {
                    "issue_title": context.payload.issue.title,
                    "issue_description": context.payload.issue.body,
                  }

                  console.log('input: ', input)

                  const apiUrl = "http://140.211.168.122/recommendation";
                  const sandboxIssueNumber = 10;
                  const sandboxOwner = context.repo.owner;
                  const sandboxRepo = context.repo.repo;

                  try {
                    const response = await axios.post(apiUrl, JSON.stringify(input), {
                      headers: {
                          'Accept': 'application/json',
                          'Content-Type': 'application/json'
                        }
                    });

                    const issueComment = response.data;
                    predictedAssignees = issueComment.recommended_developers;
                    predictedLabels = issueComment.recommended_components;

                    resultString = `Issue Number: ${context.issue.number}\n`;
                    resultString += 'Status: Open\n';
                    resultString += `Recommended Components: ${predictedLabels.join(', ')}\n`;
                    resultString += `Recommended Assignees: ${predictedAssignees.join(', ')}\n`;
                  
                    await github.issues.createComment({
                      issue_number: sandboxIssueNumber,
                      owner: sandboxOwner,
                      repo: sandboxRepo,
                      body: resultString
                    });
                  } catch (error) {
                    await github.issues.createComment({
                      issue_number: sandboxIssueNumber,
                      owner: sandboxOwner,
                      repo: sandboxRepo,
                      body: `Error: ${error.message}`,
                    });
                  }
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
