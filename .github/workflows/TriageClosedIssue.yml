name: Triager on Closed issues
run-name: TriagerX for closed Issue

on:
  issues:
    types: [closed]

jobs:
  issue_closed:
    name: Issue Closed
    runs-on: ubuntu-latest
    steps:
      - name: Commenting on the issue
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issueData } = await github.issues.get({
              issue_number: context.payload.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            console.log(issueData);

            const commentsUrl = issueData.comments_url;
            const { data: commentsData } = await github.request(commentsUrl);

            const sandboxIssueNumber = 19673;
            const sandboxOwner = context.repo.owner;
            const sandboxRepo = context.repo.repo;

            let assigned = false;
            const actualLabels = issueData.labels.map(label => label['name']);

            let resultString = `Issue number: ${context.issue.number}\n`;
            resultString += 'Status: Closed\n';
            resultString += `Actual Components: ${actualLabels.join(', ')}\n`;

            // Check if there is a closed/merged pull request associated with the issue
            // Check if the pull request has been merged
            let prAuthors = [];
            const timeline = await github.rest.issues.listEventsForTimeline({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            timeline.data.forEach(event => {
              if (event.event === 'cross-referenced' && event.source && event.source.issue.pull_request) {
                const pr = event.source.issue;
                if (pr.state === 'closed' || pr.merged === true) {
                  prAuthors.push(pr.user.login);
                }
              }
            });

            prAuthors = [...new Set(prAuthors)];
            if (!assigned) {
              if (issueData.assignees.length != 0) {
                const assignees = issueData.assignees.map(assignee => assignee.login).join(', ');
                resultString += `Actual Assignees: ${assignees}`;
              } else {
                resultString += "Actual Assignees: No one :(";
              }
            }

            if (prCreators.length > 0) {
              resultString += `PR Authors: ${prAuthors.join(', ')}\n`;
            } else {
              resultString += `PR Authors: No one :(\n`;
            }

            await github.issues.createComment({
              issue_number: sandboxIssueNumber,
              owner: sandboxOwner,
              repo: sandboxRepo,
              body: resultString
            });



            