name: Run when "triagerx" is mentioned in an issue comment

on:
  issue_comment:
      types: [created]

jobs:
  triagerx_trigger:
    runs-on: ubuntu-latest
    if: startsWith(github.event.comment.body, 'triagerx')
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install axios

      - name: Make a request to the TriagerX server
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const axios = require('axios');

            const commentBody = context.payload.comment.body;
            const restCommentBody = commentBody.replace('triagerx', '');

            let issueUrl = commentBody.includes('https') ? restCommentBody.trim() : context.payload.issue.html_url;
            let issueNumber = issueUrl.split('/').pop();
            let issueOwner = issueUrl.split('/')[3];
            let issueRepo = issueUrl.split('/')[4];

            const { data: issueData } = await github.issues.get({
              issue_number: issueNumber,
              owner: issueOwner,
              repo: issueRepo
            });

            const issueTitle = issueData.title;
            const issueDescription = issueData.body;

            const input = {
              "issue_title": issueTitle,
              "issue_description": issueDescription,
            }

            const apiUrl = "http://140.211.168.122/recommendatio";

            // actual one: 19673
            const sandboxIssueNumber = 1;
            const sandboxOwner = context.repo.owner;
            const sandboxRepo = context.repo.repo;

            try {
              const response = await axios.post(apiUrl, JSON.stringify(input), {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                  }
              });

              const issueComment = response.data;
              predictedAssignees = issueComment.recommended_developers;
              predictedLabels = issueComment.recommended_components;

              resultString = `Issue Number: ${issueNumber}\n`;
              resultString += 'Status: Open\n';
              resultString += `Recommended Components: ${predictedLabels.join(', ')}\n`;
              resultString += `Recommended Assignees: ${predictedAssignees.join(', ')}\n`;
              await github.issues.createComment({
                issue_number: sandboxIssueNumber,
                owner: sandboxOwner,
                repo: sandboxRepo,
                body: resultString
              });
            } catch (error) {
              await github.issues.createComment({
                issue_number: sandboxIssueNumber,
                owner: sandboxOwner,
                repo: sandboxRepo,
                body: `The TriagerX model is currently not responding to the issue ${issueNumber}. Please try again later.`
              });
            }
